import numpy as np
import pandas as pd
import sys
sys.path.extend(['..','./base','./evaluation'])
from classifier import Classifier

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis

class DiscriminantAnalysisModel(Classifier):

    """Model using LDA or GDA (linear discriminant analysis/ quadratic
       discriminant analysis).
       LDA is a classifier with a linear decision boundary, generated by
       fitting class conditional densities to the data and using Bayes’ rule.

       The model fits a Gaussian density to each class, assuming that all
       classes share the same covariance matrix.

       The fitted model can also be used to reduce the dimensionality of the input
       by projecting it to the most discriminative directions.

       Shrinkage is a tool to improve estimation of covariance matrices in
       situations where the number of training samples is small compared to the
       number of features. In this scenario, the empirical sample covariance is a poor estimator.

       QDA is a classifier with a quadratic decision boundary, also generated by
       fitting class conditional densities to the data and using Bayes’ rule.
    """
    # WRITE DOCUMENTATION
    def __init__(self, type='lda', solver='svd', shrinkage=None, reg_param=0.0, ranking_size=30):
        """
        """
        if type=='lda':

            self.solver = solver
            self.shrinkage = shrinkage
            self.clf = LinearDiscriminantAnalysis(solver=solver,
                                                  shrinkage=shrinkage)
        elif type=='qda':
            self.reg_param = reg_param
            self.clf = QuadraticDiscriminantAnalysis(reg_param=reg_param)
        else:
            raise Exception(f"Unknown type of discriminant analysis: '{type}'")

        self.type = type
        self.ranking_size = ranking_size

    def transform(self, X):
        """Reduce the dimensionality of the input
           by projecting it to the most discriminative directions.
        """
        return self.clf.transform(X)


if __name__ == '__main__':

    from evaluate import model_selection_pipeline, generate_challenge_run
    # from sklearn.utils.estimator_checks import check_estimator
    # check_estimator(RandomForest)
    from scipy.stats import randint as sp_randint, uniform as sp_uniform

    dataset = '../data/pl_trusted_size1_noclc_scaled_pca.csv'

    init_param = dict(type='lda', solver='svd', shrinkage=None)

    param_grid = {'type': ['lda'],
                  'solver': ['svd', 'lsqr'],
                  'shrinkage': ['auto'], # 'shrinkage': sp_uniform(0.7, 0.3)
                  'reg_param': sp_uniform(0., 1.),
                 }

    results_file = 'experiments/discriminant_analysis_model.txt'
    model_file = 'experiments/discriminant_analysis_model.pkl'

    model_selection_pipeline(dataset, DiscriminantAnalysisModel, init_param,
                             param_grid,
                             results_file=results_file)

    # Evaluation on complete data

    # Top30 score: 0.34093952654610643
    # MRR score: 0.06386638834599426
    # Accuracy: 0.022291348130964308
    # Params:
    # {'reg_param': 0.9621588587209853, 'shrinkage': 'auto', 'solver': 'lsqr', 'type': 'lda'}

    # INFO : 'reg_param' is not important here since it is a parameter of QDA
    # and only LDA is tested



    # Problems linked to data:

    # With LDA a warning is raised saying some variables are collinear: this is not
    # good and only only of them should be kept as feature variable
    # with solver 'svd'
    # /anaconda3/lib/python3.6/site-packages/sklearn/discriminant_analysis.py:388: UserWarning: Variables are collinear.
    # warnings.warn("Variables are collinear.")

    # Also, with solver 'eigen'
    # UserWarning: Only one sample available. You may want to reshape your data array


    # With QDA it fails to fit the model: a class has only one sample in the train set:
    # ValueError: y has only 1 sample in class 29982, covariance is ill defined.

    # classes with only so few samples should be removed from the training set
